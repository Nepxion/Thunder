# Namespace Configuration
namespace = thunder

# Class Configuration
serverExecutorAdapter = com.nepxion.thunder.protocol.ServerExecutorAdapter
clientExecutorAdapter = com.nepxion.thunder.protocol.ClientExecutorAdapter
clientInterceptorAdapter = com.nepxion.thunder.protocol.ClientInterceptorAdapter

nettyServerExecutor = com.nepxion.thunder.protocol.netty.NettyServerExecutor
nettyClientExecutor = com.nepxion.thunder.protocol.netty.NettyClientExecutor
nettyClientInterceptor = com.nepxion.thunder.protocol.netty.NettyClientInterceptor

hessianServerExecutor = com.nepxion.thunder.protocol.hessian.HessianServerExecutor
hessianClientExecutor = com.nepxion.thunder.protocol.hessian.HessianClientExecutor
hessianClientInterceptor = com.nepxion.thunder.protocol.hessian.HessianClientInterceptor
hessianServiceExporter = com.nepxion.thunder.protocol.hessian.HessianAuthServiceExporter

kafkaServerExecutor = com.nepxion.thunder.protocol.kafka.KafkaMQServerExecutor
kafkaClientExecutor = com.nepxion.thunder.protocol.kafka.KafkaMQClientExecutor
kafkaClientInterceptor = com.nepxion.thunder.protocol.kafka.KafkaMQClientInterceptor

mqServerExecutor = com.nepxion.thunder.protocol.mq.MQServerExecutor
mqClientExecutor = com.nepxion.thunder.protocol.mq.MQClientExecutor
mqClientInterceptor = com.nepxion.thunder.protocol.mq.MQClientInterceptor

activeMQQueue = org.apache.activemq.command.ActiveMQQueue
activeMQTopic = org.apache.activemq.command.ActiveMQTopic
activeMQJndiInitialContextFactory = org.apache.activemq.jndi.ActiveMQInitialContextFactory
activeMQInitialConnectionFactory = org.apache.activemq.spring.ActiveMQConnectionFactory
activeMQPooledConnectionFactory = org.apache.activemq.pool.PooledConnectionFactory

tibcoQueue = com.tibco.tibjms.TibjmsQueue
tibcoTopic = com.tibco.tibjms.TibjmsTopic
tibcoJndiInitialContextFactory = com.tibco.tibjms.naming.TibjmsInitialContextFactory
tibcoInitialConnectionFactory = com.tibco.tibjms.TibjmsConnectionFactory
tibcoPooledConnectionFactory = org.apache.activemq.jms.pool.PooledConnectionFactory

zookeeperRegistryInitializer = com.nepxion.thunder.registry.zookeeper.ZookeeperRegistryInitializer
zookeeperRegistryExecutor = com.nepxion.thunder.registry.zookeeper.ZookeeperRegistryExecutor

consistencyExecutor = com.nepxion.thunder.cluster.consistency.ConsistencyExecutorImpl
consistentHashLoadBalanceExecutor = com.nepxion.thunder.cluster.loadbalance.consistenthash.ConsistentHashLoadBalanceExecutor
roundRobinLoadBalanceExecutor = com.nepxion.thunder.cluster.loadbalance.roundrobin.RoundRobinLoadBalanceExecutor
randomLoadBalanceExecutor = com.nepxion.thunder.cluster.loadbalance.random.RandomLoadBalanceExecutor

securityExecutor = com.nepxion.thunder.security.SecurityExecutorImpl
logServiceMonitorExecutor = com.nepxion.thunder.monitor.LogServiceMonitorExecutor
redisServiceMonitorExecutor = com.nepxion.thunder.monitor.RedisServiceMonitorExecutor
webServiceMonitorExecutor = com.nepxion.thunder.monitor.WebServiceMonitorExecutor

# Binary Serializer Configuration
# fstBinarySerializer, kryoBinarySerializer, jdkBinarySerializer
binarySerializer = fstBinarySerializer

# Json Serializer Configuration
# jacksonJsonSerializer, aliJsonSerializer, fstJsonSerializer
jsonSerializer = jacksonJsonSerializer

# Compressor Configuration
# quickLzCompressor, snappyCompressor
compressor = quickLzCompressor

# Security Configuration 
frequency = 0
secretKey = 
version = 0
token = 0

# Hessian Configuration
hessianServletFile = hessian-servlet.xml


# Web module path, if that is provided as a web service
path = /thunder

# Method invoke with async false, that is a default value
async = false

# Method invoke with broadcast false, that is a default value
broadcast = false

# Sync method timeout, that is a default value
syncTimeout = 30 * 1000

# Async method timeout, aysnc cache will be remove when timeout, that is a default value
asyncTimeout = 5 * 60 * 1000

# Async method scan interval, thread will start to clear timeout cache every scan interval
asyncScan = 10 * 1000

# Compress transport data, maybe it works well for 2KB-20KB
compress = false

# Affinity for thread, that is a default value
affinityThread = false

# Load Balance Configuration (used for Netty and Hessian)
loadBalanceRetry = true
loadBalanceRetryTimes = 10000
loadBalanceRetryDelay = 5 * 1000

# If event notification is true, all produce and consume failure will be thrown out via an async event, so that will make the invocation do a retry 
eventNotification = true

# If event notification and smtp mail notification are all true, all produce and consume failure will be sent as a mail
smtpNotification = false

# Load balance log will help to indicate which server will be selected (used for Netty and Hessian)
loadBalanceLogPrint = true

# Transport log will help to indicate the transport information
transportLogPrint = true

# Heart beat log will help to indicate the data channel is alive or not (used for Netty)
heartBeatLogPrint = true

# Serializer log will help to indicate the byte array length
serializerLogPrint = false

# Thread Pool Configuration
# Multi thread pool
threadPoolMultiMode = false
# CPU unit
threadPoolServerCorePoolSize = 4
# CPU unit
threadPoolServerMaximumPoolSize = 8
threadPoolServerKeepAliveTime = 15 * 60 * 1000
threadPoolServerAllowCoreThreadTimeout = false
# CPU unit
threadPoolClientCorePoolSize = 4
# CPU unit
threadPoolClientMaximumPoolSize = 8
threadPoolClientKeepAliveTime = 15 * 60 * 1000
threadPoolClientAllowCoreThreadTimeout = false
# LinkedBlockingQueue, ArrayBlockingQueue, SynchronousQueue
threadPoolQueue = LinkedBlockingQueue
# CPU unit (Used for LinkedBlockingQueue or ArrayBlockingQueue)
threadPoolQueueCapacity = 1024
# BlockingPolicyWithReport, CallerRunsPolicyWithReport, AbortPolicyWithReport, RejectedPolicyWithReport, DiscardedPolicyWithReport
threadPoolRejectedPolicy = BlockingPolicyWithReport

# FST Object Pool Configuration
# CPU unit
fstObjectPoolMaxTotal = 64
# CPU unit
fstObjectPoolMaxIdle = 32
# CPU unit
fstObjectPoolMinIdle = 16
fstObjectPoolMaxWaitMillis = 3000
fstObjectPoolTimeBetweenEvictionRunsMillis = 1000 * 60 * 15
fstObjectPoolMinEvictableIdleTimeMillis = 1000 * 60 * 30
fstObjectPoolSoftMinEvictableIdleTimeMillis = 1000 * 60 * 30
fstObjectPoolBlockWhenExhausted = true
fstObjectPoolLifo = true
fstObjectPoolFairness = false

# Netty Configuration
nettySoBacklog = 128
nettySoSendBuffer = 64 * 1024
nettySoReceiveBuffer = 64 * 1024
nettyWriteBufferHighWaterMark = 32 * 1024
nettyWriteBufferLowWaterMark = 8 * 1024
nettyMaxMessageSize = 1 * 1024 * 1024
nettyWriteIdleTime = 90 * 1000
nettyReadIdleTime = 60 * 1000
nettyAllIdleTime = 45 * 1000
nettyWriteTimeout = 15 * 1000
nettyReadTimeout = 15 * 1000
nettyConnectTimeout = 10 * 1000
nettyReconnectDelay = 1000

# Hessian Configuration
hessianReadTimeout = 30 * 1000
hessianConnectTimeout = 10 * 1000

# Redis Configuration
# CPU unit
redisObjectPoolMaxTotal = 30
# CPU unit
redisObjectPoolMaxIdle = 10
# CPU unit
redisObjectPoolMinIdle = 10
redisObjectPoolMaxWaitMillis = 1000 * 3
redisObjectPoolTimeBetweenEvictionRunsMillis = 1000 * 30
redisObjectPoolMinEvictableIdleTimeMillis = 1000 * 60
redisObjectPoolSoftMinEvictableIdleTimeMillis = 1000 * 60
redisObjectPoolBlockWhenExhausted = true
redisObjectPoolLifo = true
redisObjectPoolFairness = false
redisSoTimeout = 5 * 1000
redisConnectionTimeout = 5 * 1000
redisDataExpiration = 15 * 24 * 60 * 1000
# Setinel parameters
redisReconnectionWait = 5
redisDatabase = 0
# Cluster parameters
redisMaxRedirections = 5

# Splunk Configuration
splunkMaximumTime = 60

# Kafka Configuration
kafka.producer.acks = all
kafka.producer.linger.ms = 0
kafka.producer.retries = 0
kafka.producer.buffer.memory = 33554432
kafka.producer.send.buffer.bytes = 131072
kafka.producer.receive.buffer.bytes = 32768
kafka.producer.max.request.size = 1048576
kafka.producer.batch.size = 16384
kafka.producer.timeout.ms = 30000
kafka.producer.request.timeout.ms = 30000
kafka.producer.connections.max.idle.ms = 540000
kafka.producer.reconnect.backoff.ms = 50
kafka.producer.retry.backoff.ms = 100
kafka.producer.max.block.ms = 60000
kafka.producer.max.in.flight.requests.per.connection = 5
kafka.producer.metadata.max.age.ms = 300000
kafka.producer.metadata.fetch.timeout.ms = 60000

kafka.consumer.server.poll.timeout.ms = 1000
kafka.consumer.client.poll.timeout.ms = 1000
kafka.consumer.enable.auto.commit = true
kafka.consumer.auto.offset.reset = latest
kafka.consumer.send.buffer.bytes = 131072
kafka.consumer.receive.buffer.bytes = 32768
kafka.consumer.max.partition.fetch.bytes = 1048576
kafka.consumer.fetch.min.bytes = 1024
kafka.consumer.fetch.max.wait.ms = 500
kafka.consumer.auto.commit.interval.ms = 10000
kafka.consumer.heartbeat.interval.ms = 3000
kafka.consumer.session.timeout.ms = 30000
kafka.consumer.request.timeout.ms = 40000
kafka.consumer.connections.max.idle.ms = 540000
kafka.consumer.reconnect.backoff.ms = 50
kafka.consumer.retry.backoff.ms = 100
kafka.consumer.metadata.max.age.ms = 300000

# MQ Common Configuration (used for ActiveMQ and Tibco)
mqRetryNotificationDelay = 5 * 1000
mqReconnectOnException = true

# CacheConnectionFactory Configuration (used for ActiveMQ and Tibco)
mqSessionCacheSize = 20
mqCacheConsumers = true
mqCacheProducers = true

# PoolConnectionFactory Configuration (used for ActiveMQ and Tibco)
mqMaxConnections = 20
mqMaximumActiveSessionPerConnection = 100
mqIdleTimeout = 30 * 1000
mqExpiryTimeout = 0
mqBlockIfSessionPoolIsFull = true
mqBlockIfSessionPoolIsFullTimeout = -1
mqTimeBetweenExpirationCheckMillis = -1
mqCreateConnectionOnStartup = true

# DefaultMessageListenerContainer Configuration (used for ActiveMQ and Tibco)
mqConcurrentConsumers = 10
mqMaxConcurrentConsumers = 1
mqReceiveTimeout = 1000
mqRecoveryInterval = 5000
mqIdleConsumerLimit = 1
mqIdleTaskExecutionLimit = 1
mqCacheLevel = 4
mqAcceptMessagesWhileStopping = false

# Apache Configuration
apacheBacklogSize = 128
apacheSendBufferSize = 64 * 1024
apacheReceiveBufferSize = 64 * 1024
apacheSoTimeout = 5 * 1000
apacheConnectTimeout = 5 * 1000
# CPU unit
apacheMaxTotal = 32

# Zookeeper Configuration
zookeeperSessionTimeout = 15 * 1000
zookeeperConnectTimeout = 15 * 1000
zookeeperConnectWaitTime = 1000